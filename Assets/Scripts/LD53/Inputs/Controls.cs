//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.1
//     from Assets/Inputs/Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace LD53.Inputs
{
    public partial class @Controls: IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @Controls()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""Controls"",
    ""maps"": [
        {
            ""name"": ""Bike"",
            ""id"": ""237b2992-5353-4b5d-a38f-8cca166eb107"",
            ""actions"": [
                {
                    ""name"": ""LeftPedal"",
                    ""type"": ""Button"",
                    ""id"": ""d12a6d1f-e8ec-4ed1-bd00-f4881308935e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RightPedal"",
                    ""type"": ""Button"",
                    ""id"": ""a6f1c71f-441f-4ddc-9cb8-88404e57188a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Aim"",
                    ""type"": ""Value"",
                    ""id"": ""900e4efc-5030-467f-b74b-3f4abc99acb2"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Brake"",
                    ""type"": ""Value"",
                    ""id"": ""5480390e-cf09-412d-a72c-fe950c49b60d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""98c56aff-23da-4e63-891d-d38f903de236"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftPedal"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f37d782b-461b-44bc-9acd-1a5c8dfc56de"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightPedal"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""fa2857c9-45c9-4f58-bcec-4608eca7e5b4"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Aim"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""24ff305b-e830-4722-a01e-eeb1c9f654f6"",
                    ""path"": ""<Mouse>/delta/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Aim"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""6e0e88bf-a568-497c-9e50-0661b16488c7"",
                    ""path"": ""<Mouse>/delta/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Aim"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""a9fb36d4-9747-45b1-b61c-c6359eb7a4d7"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Brake"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // Bike
            m_Bike = asset.FindActionMap("Bike", throwIfNotFound: true);
            m_Bike_LeftPedal = m_Bike.FindAction("LeftPedal", throwIfNotFound: true);
            m_Bike_RightPedal = m_Bike.FindAction("RightPedal", throwIfNotFound: true);
            m_Bike_Aim = m_Bike.FindAction("Aim", throwIfNotFound: true);
            m_Bike_Brake = m_Bike.FindAction("Brake", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Bike
        private readonly InputActionMap m_Bike;
        private List<IBikeActions> m_BikeActionsCallbackInterfaces = new List<IBikeActions>();
        private readonly InputAction m_Bike_LeftPedal;
        private readonly InputAction m_Bike_RightPedal;
        private readonly InputAction m_Bike_Aim;
        private readonly InputAction m_Bike_Brake;
        public struct BikeActions
        {
            private @Controls m_Wrapper;
            public BikeActions(@Controls wrapper) { m_Wrapper = wrapper; }
            public InputAction @LeftPedal => m_Wrapper.m_Bike_LeftPedal;
            public InputAction @RightPedal => m_Wrapper.m_Bike_RightPedal;
            public InputAction @Aim => m_Wrapper.m_Bike_Aim;
            public InputAction @Brake => m_Wrapper.m_Bike_Brake;
            public InputActionMap Get() { return m_Wrapper.m_Bike; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(BikeActions set) { return set.Get(); }
            public void AddCallbacks(IBikeActions instance)
            {
                if (instance == null || m_Wrapper.m_BikeActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_BikeActionsCallbackInterfaces.Add(instance);
                @LeftPedal.started += instance.OnLeftPedal;
                @LeftPedal.performed += instance.OnLeftPedal;
                @LeftPedal.canceled += instance.OnLeftPedal;
                @RightPedal.started += instance.OnRightPedal;
                @RightPedal.performed += instance.OnRightPedal;
                @RightPedal.canceled += instance.OnRightPedal;
                @Aim.started += instance.OnAim;
                @Aim.performed += instance.OnAim;
                @Aim.canceled += instance.OnAim;
                @Brake.started += instance.OnBrake;
                @Brake.performed += instance.OnBrake;
                @Brake.canceled += instance.OnBrake;
            }

            private void UnregisterCallbacks(IBikeActions instance)
            {
                @LeftPedal.started -= instance.OnLeftPedal;
                @LeftPedal.performed -= instance.OnLeftPedal;
                @LeftPedal.canceled -= instance.OnLeftPedal;
                @RightPedal.started -= instance.OnRightPedal;
                @RightPedal.performed -= instance.OnRightPedal;
                @RightPedal.canceled -= instance.OnRightPedal;
                @Aim.started -= instance.OnAim;
                @Aim.performed -= instance.OnAim;
                @Aim.canceled -= instance.OnAim;
                @Brake.started -= instance.OnBrake;
                @Brake.performed -= instance.OnBrake;
                @Brake.canceled -= instance.OnBrake;
            }

            public void RemoveCallbacks(IBikeActions instance)
            {
                if (m_Wrapper.m_BikeActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IBikeActions instance)
            {
                foreach (var item in m_Wrapper.m_BikeActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_BikeActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public BikeActions @Bike => new BikeActions(this);
        public interface IBikeActions
        {
            void OnLeftPedal(InputAction.CallbackContext context);
            void OnRightPedal(InputAction.CallbackContext context);
            void OnAim(InputAction.CallbackContext context);
            void OnBrake(InputAction.CallbackContext context);
        }
    }
}
